import { readFileSync } from 'fs'
import { join } from 'path'
import { STATIC_ASSETS_PATH } from '../../constants/paths'
import render from '../../render'
import { getPhrases, getT } from '../../utils/i18n'
import createStore from '../../../common/store'
import config from '../../../common/config'
import { joinPaths } from '../../../common/utils/routing'
import type Koa from 'koa'

const { mainPath, rootPath, staticPath } = config('routing')
const mainBasePath = joinPaths(rootPath, mainPath)
const staticBasePath = joinPaths(rootPath, staticPath)

const bundleStats = {
  legacy: JSON.parse(readFileSync(join(STATIC_ASSETS_PATH, 'scripts/legacy/loadable-stats.json'), {
    encoding: 'utf8'
  })),
  modern: JSON.parse(readFileSync(join(STATIC_ASSETS_PATH, 'scripts/modern/loadable-stats.json'), {
    encoding: 'utf8'
  }))
}

/**
 * Inject a nonce value into style tags generated by Styled Components.
 *
 * @param styleTags - Style tags markup generated by Styled Components.
 * @param nonce - A nonce value to inject into the style tags.
 * @private
 */
function injectStyleTagNonce (styleTags: string, nonce: string): string {
  return styleTags.replace(/(?<=<style)/gm, ` nonce="${nonce}"`)
}

/**
 * Handle requests for the main application.
 *
 * @param ctx - The context of the request.
 * @public
 */
export default function main (ctx: Koa.Context): void {
  const { browserTarget, lang, nonce } = ctx
  const bundleBasePath = joinPaths(staticBasePath, 'scripts', browserTarget) + '/'
  const phrases = getPhrases(lang)
  const store = createStore()

  const renderProps = {
    store,
    t: getT(lang)
  }

  const renderCtx = {
    basePath: mainBasePath,
    browserTarget,
    bundleBasePath,
    bundleStats: bundleStats[browserTarget],
    nonce,
    url: joinPaths(rootPath, ctx.url)
  }

  const {
    content,
    linkTags,
    scriptTags,
    styleTags
  } = render(renderProps, renderCtx)

  ctx.render('main.njk', {
    basePath: mainBasePath,
    bodyContent: content,
    bundleBasePath,
    entryScript: `/scripts/${browserTarget}/index.js`,
    lang,
    linkTags,
    phrases,
    nonce,
    scriptTags,
    state: store.getState(),
    styleTags: injectStyleTagNonce(styleTags, nonce),
    vendorScript: `/scripts/${browserTarget}/vendor.js`
  })
}
